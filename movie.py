# -*- coding: utf-8 -*-
"""movie.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vhH0cM0ECosI59T0RoeUZVP6cJXbTJp9
"""


import pandas as pd
import numpy as np

from gensim.models import Word2Vec
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

df = pd.read_csv("dataset.csv")

df.head()

df.info()

df["evidence"] = df['genre']+" "+df['overview']+" "+str(df['vote_average']) + " " + df['original_language']

df.head()

df = df[['id','title','evidence']]

df.head()

df['tokens'] = (
    df['evidence']
    .str.lower()                              # make lowercase
    .str.replace('[^a-z ]', '', regex=True)   # remove punctuation
    .str.split()                              # split into word list
)

df = df[df['tokens'].apply(lambda x: isinstance(x, list))]

model = Word2Vec(
    sentences = df['tokens'],
    vector_size=100,
    window=5,
    min_count=1,
    workers=4
)

def get_average(tokens,model):
  count = 0
  arr = np.zeros(100)
  for token in tokens:
    if token in model.wv:
      arr+=model.wv[token]
      count+=1

  if count > 0:
    return arr/count
  else:
    return arr

df['movie_vector'] = df['tokens'].apply(lambda tokens: get_average(tokens, model))

def recommend(title , df , top_n=5):
  if title not in df['title'].values:
    return f"{title} not in dataset"

  # movie_vec = df['movie_vector'][df['title'].values.tolist().index(title)] can also do this we just want to get the vector at of the movie we entered
  movie_vec = df[df['title'] == title]['movie_vector'].values[0].reshape((1,-1))

  all_vectors = np.vstack(df['movie_vector'].values)

  similarities = cosine_similarity(movie_vec, all_vectors)[0]

  df['similarities'] = similarities
  recommendation = (
      df[df['title'] != title]
      .sort_values(by = 'similarities' , ascending = False)
      .head(top_n)[['title','similarities']]
  )
  return recommendation

recommend("Iron Man" , df)

